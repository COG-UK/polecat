#!/usr/bin/env python

import csv
from Bio import SeqIO
import os
import yaml
import collections
import polecatfunks as pfunk

output_prefix = config["output_prefix"]
##### Configuration #####

if config.get("force"):
    config["force"] = "--forceall "

##### Target rules #####
rule all:
    input:
        os.path.join(config["outdir"],"report", f"{output_prefix}.html")

rule polecat_csv:
    input:
        tree = config["background_tree"],
        metadata = config["background_metadata"]
    output:
        csv = os.path.join(config["outdir"],"clusters.all.csv")
    shell:
        """
        jclusterfunk polecat \
        -i "{input.tree:q}" \
        -m {input.metadata:q} \
        {config[max_age]} \
        {config[max_count]} \
        {config[max_recency]} \
        {config[max_size]} \
        {config[min_size]} \
        {config[min_UK]} \
        {config[optimize_by]} \
        {config[rank_by]} \
        --id-column sequence_name \
        -o "{output.csv}" \
        --ignore-missing 
        """

rule process_clusters:
    input:
        snakefile = os.path.join(workflow.current_basedir,"polecat_pipeline.smk"),
        background_metadata = config["background_metadata"],
        query = rules.polecat_csv.output.csv
    threads: workflow.cores
    params:
        clusterdir = os.path.join(config["outdir"],"cluster_trees")
    output:
        filtered_metadata = os.path.join(config["outdir"],"tip_metadata.csv"),
        yaml = os.path.join(config["tempdir"],"config.yaml")
    run:
        clusters = collections.defaultdict(list)
        all_tips = []
        with open(input.query, "r") as f:
            reader = csv.DictReader(f)
            
            for row in reader:
                
                tips = row["tips"].split("|")
                for tip in tips:
                    clusters[row["node_number"]].append(tip)
                    all_tips.append(tip)

        with open(output.filtered_metadata, "w") as fw:

            with open(input.background_metadata, "r") as f:
                reader = csv.DictReader(f)
                header = reader.fieldnames
                header.append("cluster")

                writer = csv.DictWriter(fw, fieldnames=header,lineterminator='\n')
                writer.writeheader()
                for row in reader:
                    if row["sequence_name"] in all_tips:

                        new_row = row
                        c_list = []
                        for c in clusters:
                            tips = clusters[c]
                            
                            if row["sequence_name"] in tips:
                                c_list.append(c)
                        c_string = "|".join(c_list)
                        new_row["cluster"] = c_string

                        writer.writerow(new_row)
        
        config["clusters"] = clusters
        config["clusterdir"] = params.clusterdir
        config["config"] = output.yaml

        with open(output.yaml, 'w') as fw:
            yaml.dump(config, fw)
        if clusters:
            shell("snakemake --nolock --snakefile {input.snakefile:q} "
                                "{config[force]} "
                                "{config[log_string]} "
                                "--directory {config[tempdir]:q} "
                                "--configfile {output.yaml:q} "
                                "--config "
                                "filtered_metadata={output.filtered_metadata:q} "
                                "--cores {workflow.cores}")
        else:
            pass

rule make_report:
    input:
        metadata = rules.process_clusters.output.filtered_metadata,
        csv = rules.polecat_csv.output.csv,
        template = config["template"]
    params:
        clusterdir = os.path.join(config["outdir"],"cluster_trees")
    output:
        report = os.path.join(config["outdir"],"report", f"{output_prefix}.html")
    run:
        shell(
        """
        render_report.py \
        --metadata {input.csv:q} \
        --template {input.template:q} \
        --report {output.report:q} \
        --include-stats {config[stats]} \
        --command {config[command]:q} \
        --background-metadata {input.metadata:q} \
        --background-fields {config[background_fields]} \
        --tree-dir {params.clusterdir:q}
        """)
        print(pfunk.green("Polecat report written to:") + f"{output.report}")

